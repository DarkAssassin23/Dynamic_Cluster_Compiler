# Distributed makefile

TARGET = bst
CC = g++
CFLAGS = -std=gnu++11 -g -Wall

ROOT = ..
BINDIR = $(ROOT)/bin
OBJDIR = $(ROOT)/obj

SRCDIR = src
TREEDIR = $(SRCDIR)/tree

.PHONY: default all clean executable build

# Rule to build the executable
executable: $(BINDIR)/$(TARGET)
default: executable
all: default

# Having the includes directory, or directories
# is pivotal in ensuring your code compiles correctly. 
# Since we will be moving source files all over the place, 
# if you do not specify where the includes are on your compilation 
# and builds will fail
INCLUDES = -I $(ROOT)/$(TREEDIR)

ROOTSRCS = $(wildcard $(ROOT)/$(SRCDIR)/*.cpp $(ROOT)/$(TREEDIR)/*.cpp)
SRCS = $(wildcard $(SRCDIR)/*.cpp $(TREEDIR)/*.cpp)
# Get only the object files that will be generated
# by compiling the current directory
DIRFILES = $(patsubst %.cpp, $(OBJDIR)/%.o, $(SRCS))
# Get all the object files required to build the
# executable
OBJECTS = $(patsubst $(ROOT)/%.cpp, $(OBJDIR)/%.o, $(ROOTSRCS))
HEADERS = $(wildcard $(ROOT)/$(TREEDIR)/*.h)

$(OBJDIR)/%.o: %.cpp $(HEADERS)
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

.PRECIOUS: $(BINDIR)/$(TARGET) $(OBJECTS) $(DIRFILES)

$(BINDIR)/$(TARGET): $(OBJECTS)
	@mkdir -p $(@D)
	$(CC) $(OBJECTS) -g -Wall $(LIBS) -o $@

# Rule to only compile the source files in the worker
# nodes directory
build: $(DIRFILES)

clean:
	-rm -rf $(BINDIR)
	-rm -rf $(OBJDIR)